# Compose fileのバージョン指定
version: '3'
# どんなコンテナを立ち上げるか
services:
  # laravelを動かすコンテナ
  app:
    # どのポートを開いて繋ぐか。下記はコンテナの80番ポートを開いて、ホストの8000番につなぐ
    ports:
      - "8000:80"
    # 先ほど作ったDockerfileを使って、コンテナをビルドするという指定
    build: ./app
    # コンテナの名前を指定
    container_name: curry_potal
    # コンテナとホスト側のディレクトリを同期する場所の指定。laravelのソースが入る予定の場所
    volumes:
      - ./src:/var/www/html/curry_potal
      - vendor-store:/var/www/html/curry_potal/vendor #ボリュームマウント
    environment: # ⑩ 環境変数を設定
      - TZ=Asia/Tokyo
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_NAME:-curry_potal}
      - DB_USERNAME=${DB_USER:-laravel_user}
      - DB_PASSWORD=${DB_PASS:-laravel_pass}
  # MySQLを動かすコンテナ
  db:
    # Docker HubからMySQL5.7の公式イメージをダウンロードしてくる指定
    image: mysql:5.7
    container_name: curry_potal_db
    # コンテナ内の環境変数を指定。環境変数を渡すとビルド時に設定してくれるDockerイメージがあるので、利用の際はDocker Hubのサイトで確認すると良い
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: curry_potal
      MYSQL_USER: laravel_user
      MYSQL_PASSWORD: laravel_pass
      TZ: 'Asia/Tokyo'
    # 起動時のコマンド
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    # ディレクトリ同期。設定ファイルとMySQLのデータが保存される場所を同期している。コンテナは基本的に起動時に変更されてもコンテナ自体が止まるとデータが消えてしまうため、保存しておきたいものはホストマシンと同期しておく必要がある。
    volumes:
      - ./db/data:/var/lib/mysql
      - ./db/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - TZ=Asia/Tokyo
      - PMA_ARBITRARY=1
      - PMA_HOST=db
      - PMA_USER=root
      - PMA_PASSWORD=root
    depends_on:
      - db
    ports:
      - 8080:80
volumes:
  vendor-store:
